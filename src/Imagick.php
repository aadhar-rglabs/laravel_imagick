<?php

namespace Aadhar\LaravelImagick;

use File;
use Symfony\Component\HttpFoundation\Response;
use Illuminate\Support\Facades\Log;

class Imagick
{

    /**
     * The function `thumbnailImage` processes an image using Imagick, creates a thumbnail with
     * specified dimensions, and saves it to a designated folder with logging for error tracking. 
     * Using php imagick extension.
     * 
     * @param mixed $image image The `image` param is the eloquent object for generating
     * thumbnail images using the Imagick library in PHP. It takes several parameters including
     * @param mixed $profileImage profileImage The `profileImage` param is the name of image i.e. 20241024124836.jpg
     * @param mixed $image_path image_path The `image_path` parameter in the `thumbnailImage` function is the path to the
     * original image file that you want to create a thumbnail for. It should be the absolute path to
     * the image file on your server.
     * @param mixed $module module The `module` parameter in the `thumbnailImage` function is used to specify the
     * module or category to which the thumbnail image belongs. It is used to create a folder path
     * where the thumbnail image will be saved.
     * @param mixed $width width The `width` parameter in the `thumbnailImage` function represents the desired
     * width of the thumbnail image that will be generated. This parameter specifies the width in
     * pixels that the thumbnail image should be resized to.
     * @param mixed $height height The `height` parameter in the `thumbnailImage` function represents the desired
     * height of the thumbnail image that will be generated by the Imagick library. This parameter is
     * used to specify the height to which the original image should be resized while maintaining its
     * aspect ratio.
     * @return void
     */
    public function thumbnailImage($image, $profileImage, $image_path, $module, $width, $height)
    {
        try {
            $imagick = new \Imagick(realpath($image_path));
            $imagick->setbackgroundcolor('rgb(64, 64, 64)');
            $imagick->thumbnailImage($width, $height, true, true);

            $folder = public_path("/thumbs/" . $module);
            if (!File::isDirectory($folder)) {
                File::makeDirectory($folder, 0777, true, true);
            }

            $savePath = $folder . '/' . pathinfo($profileImage, PATHINFO_FILENAME) . "." . $image->getClientOriginalExtension();
            $status = $imagick->writeImage($savePath);

            Log::info('Info: ', [
                'status' => $status,
                'savePath' => $savePath,
                'image' => $image,
                'image_path' => $image_path,
                'module' => $module,
            ]);
        } catch (\Exception $e) {
            Log::error('Error: ', [
                'status' => Response::HTTP_UNPROCESSABLE_ENTITY,
                'message' => 'Line: ' . $e->getLine() . '. File: ' . $e->getFile() . '. ' . $e->getMessage()
            ]);
        }
    }


    /**
     * The function `addImageAndThumbPaginationCollect` adds image URLs to items in a laravel collection that has pagination based on
     * their avatar presence.
     * 
     * @param mixed $collection collection The `collection` parameter in the `addImageAndThumbPaginationCollect` function is
     * expected to be a collection of items that you want to process. This function iterates over each item
     * in the collection, adds image URLs based on certain conditions, and then returns the modified
     * collection.
     * @param mixed $module module The `module` parameter in the `addImageAndThumbPaginationCollect` function represents
     * the module or category under which the images are stored. It is used to construct the URLs for the
     * original image and its thumbnail based on the item's key.
     * @param mixed $key key The `` parameter in the `addImageAndThumbPaginationCollect` function is used to
     * access the value of a specific key in each item of the collection. This key is used to determine the
     * filename of the image associated with the item.
     * @param mixed $new_key
     * @return mixed The function `addImageAndThumbPaginationCollect` is returning the modified collection with
     * added `image_org` and `image_thumb` properties for each item in the collection.
     */
    public function addImageAndThumbPaginationCollect($collection, $module, $key, $new_key = '') {
        $api_url = config('app.api_url');
        $new_key_org = !empty($new_key) ? $new_key . '_org' : 'image_org' ;
        $new_key_thumb = !empty($new_key) ? $new_key . '_thumb' : 'image_thumb' ;
        $collection->map(function($item) use ($api_url, $module, $key, $new_key_org, $new_key_thumb) {
            if(!empty($item->avatar)) {
                $item->{$new_key_org} = $api_url . 'public/' . $module . '/' . $item->{$key};
                $item->{$new_key_thumb} = $api_url . 'public/thumbs/' . $module . '/' . $item->{$key};
            } else {
                $item->{$new_key_org} = $api_url . 'public/' . $module . '/default-avatar.png';
                $item->{$new_key_thumb} = $api_url . 'public/' . $module . '/default-avatar-thumb.png';
            }
            return $item;
        });

        return $collection;
    }
    

    /**
     * The function `addImageAndThumbSingleArray` adds image URLs for original image and it's thumbnail to an array based on a specified key
     * name and module.
     * 
     * @param mixed $array The `addImageAndThumbSingleArray` function takes an array, a module name, and a key
     * name as parameters. It iterates over the array and checks if the key matches the provided key
     * name and if the value is not empty. If the condition is met, it adds `avatar_big
     * @param mixed $module module The `module` parameter in the `addImageAndThumbSingleArray` function represents
     * the module or category to which the image belongs. It is used to construct the URLs for the
     * image and thumbnail based on the module provided.
     * @param mixed $key_name key_name The `key_name` parameter in the `addImageAndThumbSingleArray` function is used
     * to specify the key in the array that contains the image file name. This key is used to determine
     * if the image exists in the array and then generate URLs for the big avatar and thumbnail avatar
     * based on the
     * @param mixed $new_key
     * @return array The function `addImageAndThumbSingleArray` returns the modified array with added
     * `avatar_big` and `avatar_thumb` keys based on the conditions specified in the function.
     */
    public function addImageAndThumbSingleArray($array, $module, $key_name, $new_key = '') {
        $api_url = config('app.api_url');
        $new_key_org = !empty($new_key) ? $new_key . '_org' : $key_name . '_org' ;
        $new_key_thumb = !empty($new_key) ? $new_key . '_thumb' : $key_name . '_thumb' ;
        foreach ($array as $key => $value) {
            if(($key == $key_name) && isset($value)) {
                $array["{$new_key_org}"] = config('app.api_url') . "public/$module/" . $value;
                $array["{$new_key_thumb}"] = config('app.api_url') . "public/thumbs/$module/" . $value;
            } else {
                $array["{$new_key_org}"] = $api_url . "public/$module/default-avatar.png";
                $array["{$new_key_thumb}"] = $api_url . "public/$module/default-avatar-thumb.png";
            }
        }
        return $array;
    }


    /**
     * The function `addImageAndThumbSingleCollection` adds image URLs to a collection based on
     * specified keys and module.
     * 
     * @param mixed $collection The `collection` parameter in the `addImageAndThumbSingleCollection` function
     * is an array that contains data related to an item or entity. It likely includes information such
     * as image URLs, module names, and key names for the original image and thumbnail.
     * @param mixed $module module The `module` parameter in the `addImageAndThumbSingleCollection` function
     * represents the module name or identifier that is used to construct the URLs for the original
     * image and its thumbnail. It is used to determine the path where the images are stored or
     * retrieved from in the API.
     * @param mixed $key_name key_name The `key_name` parameter in the `addImageAndThumbSingleCollection` function
     * represents the key in the `` array that holds the image filename. This function is
     * designed to add two new keys to the `` array: one for the original image URL and
     * another for the thumbnail image
     * @param mixed $new_key new_key The `new_key` parameter in the `addImageAndThumbSingleCollection` function is
     * used to specify a new key name for the original image and thumbnail URLs in the collection. If
     * `new_key` is provided, it will be used to construct the new key names for the original image and
     * thumbnail
     * 
     * @return mixed The function `addImageAndThumbSingleCollection` returns the updated `` array
     * with new keys `` and `` containing the image URLs based on the
     * provided parameters and conditions.
     */
    public function addImageAndThumbSingleCollection($collection, $module, $key_name, $new_key = '') {
        $api_url = config('app.api_url');
        $new_key_org = !empty($new_key) ? $new_key . '_org' : $key_name . '_org' ;
        $new_key_thumb = !empty($new_key) ? $new_key . '_thumb' : $key_name . '_thumb' ;
        if(!empty($collection["{$key_name}"])) {
            $collection["{$new_key_org}"] = $api_url . "public/$module/" . $collection["{$key_name}"];
            $collection["{$new_key_thumb}"] = $api_url . "public/thumbs/$module/" . $collection["{$key_name}"];
        } else {
            $collection["{$new_key_org}"] = $api_url . "public/$module/default-avatar.png";
            $collection["{$new_key_thumb}"] = $api_url . "public/$module/default-avatar-thumb.png";
        }
        return $collection;
    }

    
    /**
     * The function `addFilePaginationCollect` adds a new key to a collection based on certain
     * conditions and returns the modified collection.
     * 
     * @param mixed $collection The `collection` parameter is the data collection that you want to modify by
     * adding pagination for files.
     * @param mixed $module module The `module` parameter in the `addFilePaginationCollect` function represents the
     * module name or directory where the files are stored. It is used to construct the URL for the
     * file based on the module and key provided.
     * @param mixed $key key The `key` parameter in the `addFilePaginationCollect` function is used to specify the
     * key in each item of the collection that contains the file name or path. This key is used to
     * access the file information in each item of the collection and process it accordingly.
     * @param mixed $new_key new_key The `new_key` parameter in the `addFilePaginationCollect` function is an optional
     * parameter that specifies the new key to be used for storing the modified file URL in the
     * collection items. If a value is provided for `new_key`, it will be used as the new key. If `new
     * 
     * @return mixed The function `addFilePaginationCollect` is returning the modified collection with added
     * file URLs based on the provided parameters such as ``, ``, and ``. The
     * function loops through each item in the collection, checks if the `resume` property is not
     * empty, and then sets the value of the new key (either `` or 'image_org') to the
     * constructed
     */
    public function addFilePaginationCollect($collection, $module, $key, $new_key = '') {
        $api_url = config('app.api_url');
        $new_key_org = !empty($new_key) ? $new_key . '_org' : 'image_org' ;
        $collection->map(function($item) use ($api_url, $module, $key, $new_key_org) {
            if(!empty($item->resume)) {
                // public/uploads/resume
                $item->{$new_key_org} = $api_url . 'public/' . $module . '/' . $item->{$key};
            } else {
                $item->{$new_key_org} = "";
            }
            return $item;
        });
        return $collection;
    }


    /**
     * The function `addFileSingleCollection` adds a new key to a collection with a modified value based on
     * the provided parameters.
     * 
     * @param mixed $collection The `collection` parameter in the `addFileSingleCollection` function is an array
     * that contains data related to a specific item or entity. It likely includes information such as file
     * paths, URLs, or other relevant data for the item.
     * @param mixed $module module The `module` parameter in the `addFileSingleCollection` function likely refers to the
     * module or section of the application where the file is being added. It is used to construct the URL
     * for the file based on the API URL and the module provided.
     * @param mixed $key_name key_name `key_name` is the key name used to access the file path in the collection array. It
     * is the identifier for the file path that needs to be processed in the `addFileSingleCollection`
     * function.
     * @param mixed $new_key new_key The `new_key` parameter in the `addFileSingleCollection` function is an optional
     * parameter that allows you to specify a new key name for the original file path in the collection. If
     * provided, the function will use this new key name followed by '_org' as the key for the original
     * file
     * 
     * @return mixed The function `addFileSingleCollection` returns the modified `` array with a new
     * key `` added based on the conditions specified in the function.
     */
    public function addFileSingleCollection($collection, $module, $key_name, $new_key = '') {
        $api_url = config('app.api_url');
        $new_key_org = !empty($new_key) ? $new_key . '_org' : $key_name . '_org' ;
        if(!empty($collection["{$key_name}"])) {
            $collection["{$new_key_org}"] = $api_url . "public/$module/" . $collection["{$key_name}"];
        } else {
            $collection["{$new_key_org}"] = "";
        }
        return $collection;
    }
    
}
